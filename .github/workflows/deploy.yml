name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user
  APP_DIR: /home/ec2-user/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List directory structure (debugging)
        run: |
          echo "Root directory:"
          ls -la
          echo "Looking for gradlew:"
          find . -name "gradlew" -type f
          echo "Looking for build.gradle:"
          find . -name "build.gradle" -type f

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Grant execute permission and build
        run: |
          # gradlew ÌååÏùº ÏúÑÏπòÏóê Îî∞Îùº Ï°∞Í±¥Î∂Ä Ïã§Ìñâ
          if [ -f "./gradlew" ]; then
            echo "gradlew found in root directory"
            chmod +x ./gradlew
            ./gradlew clean bootJar --no-daemon
            echo "BUILD_PATH=." >> $GITHUB_ENV
          elif [ -f "./backend/gradlew" ]; then
            echo "gradlew found in backend directory"
            chmod +x ./backend/gradlew
            cd backend && ./gradlew clean bootJar --no-daemon
            echo "BUILD_PATH=./backend" >> $GITHUB_ENV
          else
            echo "‚ùå gradlew not found"
            exit 1
          fi

      - name: Debug build output
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Looking for JAR files:"
          find . -name "*.jar" -type f
          echo "Looking for Docker files:"
          find . -name "docker-compose.yml" -o -name "Dockerfile"

      - name: Prepare deployment files
        run: |
          mkdir -p deploy
          
          # JAR ÌååÏùº ÏúÑÏπò ÌôïÏù∏ ÌõÑ Î≥µÏÇ¨
          if [ "$BUILD_PATH" = "." ]; then
            if [ -f "./build/libs/"*.jar ]; then
              cp ./build/libs/*.jar deploy/app.jar
              cp ./docker-compose.yml deploy/
              cp ./Dockerfile deploy/
              echo "‚úÖ Files copied from root directory"
            else
              echo "‚ùå JAR file not found in ./build/libs/"
              exit 1
            fi
          else
            if [ -f "./backend/build/libs/"*.jar ]; then
              cp ./backend/build/libs/*.jar deploy/app.jar
              cp ./backend/docker-compose.yml deploy/
              cp ./backend/Dockerfile deploy/
              echo "‚úÖ Files copied from backend directory"
            else
              echo "‚ùå JAR file not found in ./backend/build/libs/"
              exit 1
            fi
          fi
          
          echo "Deployment package contents:"
          ls -la deploy/

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"; then
            echo "‚úÖ SSH connection verified"
          else
            echo "‚ùå SSH connection failed"
            exit 1
          fi

      - name: Prepare EC2 environment
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "
            mkdir -p $APP_DIR
          
            # Í∏∞Ï°¥ JAR ÌååÏùº Î∞±ÏóÖ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
            if [ -f '$APP_DIR/app.jar' ]; then
              cp $APP_DIR/app.jar $APP_DIR/app.jar.backup.\$(date +%Y%m%d_%H%M%S) || true
              echo 'Previous deployment backed up'
            fi
          "

      - name: Stop existing application
        run: |
          echo "Stopping existing application..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "
            cd $APP_DIR && docker-compose down --remove-orphans || {
              echo 'No existing containers to stop'
              exit 0
            }
          "

      - name: Upload files to EC2
        run: |
          echo "Uploading deployment files..."
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -r deploy/* $EC2_USER@$EC2_HOST:$APP_DIR/
          echo "‚úÖ Files uploaded successfully"

      - name: Create environment file
        run: |
          echo "Creating environment file..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "
            cd $APP_DIR && 
            echo 'GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}' > .env &&
            echo '‚úÖ Environment file created'
          "

      - name: Deploy application
        run: |
          echo "Starting deployment..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 $EC2_USER@$EC2_HOST "
            cd $APP_DIR && docker-compose up -d --build --force-recreate
          "
          echo "‚úÖ Application started"

      - name: Wait for application startup
        run: |
          echo "Waiting for application to be ready..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "
            cd $APP_DIR
            for i in {1..12}; do
              if docker-compose ps | grep -q 'Up'; then
                echo '‚úÖ Application is running'
                exit 0
              fi
              echo 'Waiting... (\$i/12)'
              sleep 5
            done
            echo '‚ö†Ô∏è Application may still be starting'
          "

      - name: Check deployment status
        run: |
          echo "Final deployment status:"
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "
            cd $APP_DIR
            echo '=== Container Status ==='
            docker-compose ps
            echo -e '\n=== Recent Logs ==='
            docker-compose logs --tail=50 app
          "
          echo "üöÄ Deployment completed!"