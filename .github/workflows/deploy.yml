name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ec2-user
  APP_DIR: /home/ec2-user/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List directory structure (debugging)
        run: |
          echo "Root directory:"
          ls -la
          echo "Looking for gradlew:"
          find . -name "gradlew" -type f
          echo "Looking for build.gradle:"
          find . -name "build.gradle" -type f

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission and build
        run: |
          # gradlew 파일 위치에 따라 조건부 실행
          if [ -f "./gradlew" ]; then
            echo "gradlew found in root directory"
            chmod +x ./gradlew
            ./gradlew clean bootJar
          elif [ -f "./backend/gradlew" ]; then
            echo "gradlew found in backend directory"
            chmod +x ./backend/gradlew
            cd backend && ./gradlew clean bootJar
          else
            echo "gradlew not found"
            exit 1
          fi

      - name: Debug build output
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Looking for JAR files:"
          find . -name "*.jar" -type f
          echo "Looking for Docker files:"
          find . -name "docker-compose.yml" -o -name "Dockerfile"

      - name: Prepare deployment files
        run: |
          mkdir -p deploy
          # JAR 파일 위치 확인 후 복사
          if [ -f "./build/libs/"*.jar ]; then
            cp ./build/libs/*.jar deploy/app.jar
            cp ./docker-compose.yml deploy/
            cp ./Dockerfile deploy/
          elif [ -f "./backend/build/libs/"*.jar ]; then
            cp ./backend/build/libs/*.jar deploy/app.jar
            cp ./backend/docker-compose.yml deploy/
            cp ./backend/Dockerfile deploy/
          else
            echo "JAR file not found"
            exit 1
          fi

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.EC2_SSH_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"

      - name: Stop existing application
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "cd $APP_DIR && docker-compose down || true"

      - name: Upload files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 -r deploy/* $EC2_USER@$EC2_HOST:$APP_DIR/

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "cd $APP_DIR && docker-compose up -d --build"

      - name: Check deployment status
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USER@$EC2_HOST "cd $APP_DIR && docker-compose ps && docker-compose logs --tail=50 app"